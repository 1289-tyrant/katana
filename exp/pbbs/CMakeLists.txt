include_directories("include")
set(input ${CMAKE_CURRENT_BINARY_DIR}/inputs)

if(EXP_DOALL MATCHES "GALOIS")
  if(CXX0X_FOUND)
    message("Using ${EXP_DOALL}")
    set(extra_libs galois_exp galois ${RT_LINK} ${extra_libs})
    add_definitions(-DEXP_DOALL_GALOIS)
    add_definitions(${CXX0X_FLAGS})
  else()
    message(FATAL_ERROR "Asked for GALOIS but Lambda support not found")
  endif()
elseif(EXP_DOALL MATCHES "CILK")
  message("Using ${EXP_DOALL}")
  add_definitions(-DEXP_DOALL_CILKP)
elseif(EXP_DOALL MATCHES "TBB")
  if(TBB_FOUND)
    if(CXX0X_FOUND)
      message("Using ${EXP_DOALL}")
      set(extra_libs ${TBB_LIBRARIES} ${extra_libs})
      add_definitions(-DEXP_DOALL_TBB)
      add_definitions(${CXX0X_FLAGS})
    else()
      message(FATAL_ERROR "Asked for TBB but TBB or C++0x support not found")
    endif()
  else()
    message(FATAL_ERROR "Asked for TBB but TBB or C++0x support not found")
  endif()
elseif(EXP_DOALL MATCHES "OPENMP" OR EXP_DOALL MATCHES "OPENMP_RUNTIME")
  find_package(OpenMP)
  set(OpenMP_LIBRARIES "-lgomp")
  if(OPENMP_FOUND)
    message("Using ${EXP_DOALL}")
    #set(exp_doall_lib ${OpenMP_LIBRARIES})
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_CXX_FLAGS}")
    add_definitions(${OpenMP_CXX_FLAGS})
    if (EXP_DOALL MATCHES "OPENMP")
      add_definitions(-DEXP_DOALL_OPENMP)
    else()
      add_definitions(-DEXP_DOALL_OPENMP_RUNTIME)
    endif()
  else()
    message(FATAL_ERROR "Asked for OPENMP but OPENMP was not found")
  endif()
else()
  message("Using Default")
endif()

add_subdirectory(lib)
add_subdirectory(inputs)
add_subdirectory(apps)
