message("[EXP_DOALL] Using ${EXP_DOALL}")
set(extra_libs galois_exp)

if(EXP_DOALL MATCHES "GALOIS" OR EXP_DOALL MATCHES "PTHREAD" OR EXP_DOALL MATCHES "DMP")
  if(HAS_CXX0X_LAMBDA)
    set(extra_libs galois ${RT_LINK} ${extra_libs})
    add_definitions(-DEXP_DOALL_GALOIS)
    add_definitions(${CXX0X_FLAGS})
  else()
    message(FATAL_ERROR "Asked for GALOIS but C++ lambda support not found")
  endif()
elseif(EXP_DOALL MATCHES "CILK")
  add_definitions(-DEXP_DOALL_CILK)
elseif(EXP_DOALL MATCHES "TBB")
  if(TBB_FOUND)
    if(HAS_CXX0X_LAMBDA)
      set(extra_libs ${TBB_LIBRARIES} ${extra_libs})
      add_definitions(-DEXP_DOALL_TBB)
      add_definitions(${CXX0X_FLAGS})
    else()
      message(FATAL_ERROR "Asked for TBB but C++ lambda support not found")
    endif()
  else()
    message(FATAL_ERROR "Asked for TBB but TBB not found")
  endif()
elseif(EXP_DOALL MATCHES "OPENMP" OR EXP_DOALL MATCHES "OPENMP_RUNTIME")
  find_package(OpenMP)
  if(OPENMP_FOUND)
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_CXX_FLAGS}")
    add_definitions(${OpenMP_CXX_FLAGS})
    if (EXP_DOALL MATCHES "OPENMP")
      add_definitions(-DEXP_DOALL_OPENMP)
    else()
      add_definitions(-DEXP_DOALL_OPENMP_RUNTIME)
    endif()
  else()
    message(FATAL_ERROR "Asked for OPENMP but OPENMP was not found")
  endif()
endif()

add_subdirectory(apps)
add_subdirectory(src)
add_subdirectory(test)
add_subdirectory(suites)
