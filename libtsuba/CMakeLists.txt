if(GALOIS_FORCE_NON_STATIC)
  add_library(tsuba)
else()
  add_library(tsuba STATIC)
endif()
set_target_properties(tsuba PROPERTIES EXPORT_NAME tsuba)

set(sources
   src/file.cpp
   src/GlobalState.cpp
   src/tsuba.cpp
   src/FileView.cpp
   src/FileFrame.cpp
   src/Errors.cpp
   src/RDG.cpp
   src/s3.cpp
   src/LocalStorage.cpp
   src/S3Storage.cpp
   src/FaultTest.cpp
)

target_sources(tsuba PRIVATE ${sources})

target_include_directories(tsuba PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>
)

target_compile_options(tsuba PRIVATE -Wmissing-declarations)

target_link_libraries(tsuba PUBLIC galois_support)

if(BUILD_SHARED_LIBS)
  target_compile_definitions(tsuba PRIVATE GALOIS_SHARED_LIB_BUILDING)
else()
  target_compile_definitions(tsuba PRIVATE GALOIS_STATIC_LIB)
endif()

find_package(nlohmann_json 3.7.3 REQUIRED)
target_link_libraries(tsuba PUBLIC nlohmann_json::nlohmann_json)

find_package(Arrow CONFIG REQUIRED)
if(${ARROW_VERSION} VERSION_LESS 0.17 OR ${ARROW_VERSION} VERSION_GREATER_EQUAL 2.0.0)
  message(FATAL_ERROR "libarrow must be version 0.17 or 1.0; found ${ARROW_VERSION} instead")
endif()

get_filename_component(ARROW_CONFIG_DIR ${Arrow_CONFIG} DIRECTORY)
find_package(Parquet REQUIRED HINTS ${ARROW_CONFIG_DIR})
target_link_libraries(tsuba PUBLIC arrow_shared parquet_shared)

if(TARGET Boost::Boost)
  # Autogenerated conan module doesn't provide header-only target. Extract one
  # manually.
  get_target_property(include_dirs Boost::Boost INTERFACE_INCLUDE_DIRECTORIES)
  target_include_directories(tsuba PUBLIC ${include_dirs})
else()
  # Standard CMake Boost module
  target_link_libraries(tsuba PUBLIC Boost::boost)
endif()

# The conan generated package name is aws-sdk-cpp while the
# package name when built from source is AWSSDK.
find_package(aws-sdk-cpp QUIET)
if(aws-sdk-cpp_FOUND)
  target_link_libraries(tsuba PRIVATE aws-sdk-cpp::aws-sdk-cpp)
else()
  find_package(AWSSDK REQUIRED COMPONENTS transfer)
  target_link_libraries(tsuba PRIVATE ${AWSSDK_LINK_LIBRARIES})
endif()

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME AND BUILD_TESTING)
  add_subdirectory(tests)
endif()

install(
  DIRECTORY include/
  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
  COMPONENT dev
  FILES_MATCHING PATTERN "*.h"
)

install(TARGETS tsuba
  EXPORT GaloisTargets
  LIBRARY
    DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    COMPONENT lib
  ARCHIVE
    DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    COMPONENT lib
  INCLUDES DESTINATION "${RELATIVE_INCLUDE_FROM_INSTALL_PREFIX}"
)
