# -*- mode: cython -*-

from .cpp.libgalois cimport datastructures
from libc.stdint cimport uintptr_t, int64_t, uint64_t

{% macro wrap_insert_bag(element_type) %}
{% set underlying_type %}datastructures.InsertBag[{{element_type}}]{% endset -%}
{% set class_name %}InsertBag_{{element_type}}{% endset -%}
cdef class {{class_name}}_Iterator:
    cdef object obj
    cdef {{underlying_type}}.iterator it
    cdef {{underlying_type}}.iterator end

cdef class {{class_name}}:
    cdef {{underlying_type}} underlying
{% endmacro %}

{% for element_type, python_type in [("uint64_t", "'uint64_t'"), ("int64_t", "int"), ("double", "float")] %}
{{wrap_insert_bag(element_type)}}
{% endfor %}


{% macro wrap_large_array(element_type) %}
{% set underlying_type %}datastructures.LargeArray[{{element_type}}]{% endset -%}
{% set class_name %}LargeArray_{{element_type}}{% endset -%}
cdef class {{class_name}}_Iterator:
    cdef object obj
    cdef {{underlying_type}}.iterator it
    cdef {{underlying_type}}.iterator end

cdef class {{class_name}}:
    cdef {{underlying_type}} underlying
    # Stored here so we can pass out pointers to them.
    cdef Py_ssize_t shape
    cdef Py_ssize_t stride

    cdef bint _check_not_allocated({{class_name}} self) except False
    cdef bint _check_allocated({{class_name}} self) except False
    cdef bint _mark_allocated({{class_name}} self) except False

{% endmacro %}

{% for element_type, python_type in [("uint64_t", "'uint64_t'"), ("int64_t", "int"), ("double", "float")] %}
{{wrap_large_array(element_type)}}
{% endfor %}