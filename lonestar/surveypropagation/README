DESCRIPTION 

This is a heuristic SAT solver based on Bayesian inference. We implement the 
algorithm from the the following paper:

A. Braunstein, M. Mezard, and R. Zecchina. Survey Propagation: An Algorithm for 
Satisfiability. Random Structures and Algorithms, 27:201-226, 2005.


TUNING PERFORMANCE  

The performance depends on the followings:

1. For the do_all loops named "update_biases" and "fix_variables", tune the 
compile time constant, CHUNK_SIZE, the granularity of stolen work when work 
stealing is enabled (via galois::steal()).

2. For the for_each loop named "update_eta", tune the compile time constant,
CHUNK_SIZE, the granularity of work distribution used by galois::wl<WL>().

The optimal value of the constant might depend on the architecture, so you 
might want to evaluate the performance over a range of values (say [16-4096]).

BUILD

$GALOIS_ROOT denotes the root of the Galois source. $BUILD_ROOT denotes the 
directory where you want to build PageRank. 

$ mkdir -p $BUILD_ROOT; cd $BUILD_ROOT
$ CC=gcc CXX=g++ cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1  $GALOIS_ROOT
$ cd ./lonestar/surveypropagation; make -j


RUN

The following are a few examples of running PageRank.

$ ./surveypropagation <random-seed> <num-literals> <num-clauses> <num-literals-per-clause> -t 40
