/**
 * @file
 * @section License
 *
 * This file is part of Galois.  Galois is a framework to exploit
 * amorphous data-parallelism in irregular programs.
 *
 * Galois is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, version 2.1 of the
 * License.
 *
 * Galois is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Galois.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * @section Copyright
 *
 * Copyright (C) 2015, The University of Texas at Austin. All rights
 * reserved.
 *
 * @section Description
 *
 * @author Rashid Kaleem<rashid.kaleem@gmail.com>
 */

#ifdef __APPLE__
#include <OpenCL/opencl.h>
#else
extern "C" {
#include "CL/cl.h"
}
;
#endif

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <sys/stat.h>
#include <assert.h>
#include <math.h>

//#define _GOPT_CL_ENABLE_PROFILING_ 1 //to enable profiling (slower).
#ifndef CL_DEVICE_MANAGER_H_
#define CL_DEVICE_MANAGER_H_

/*
 #define AMD_OCL_COMPILE_OPTIONS "" //"-O3 -x clc++ -I."
 #define ACTIVE_OCL_COMPILE_OPTIONS AMD_OCL_COMPILE_OPTIONS
 */
namespace galois{
namespace OpenCL{
   struct CL_Platform;
   struct OpenCL_Setup;
}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CL_DeviceStats.h"
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CL_Device.h"
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CL_Platform.h"
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CL_Context.h"
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
#include "CL_DeviceSet.h"
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "CL_Kernel.h"
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace galois{
namespace OpenCL{
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template<typename T>
void CL_Device::init_on_device(cl_mem arr, size_t sz, const T & val) {
#if _GALOIS_BUILD_INITIALIZER_KERNEL_
   galois::OpenCL::CHECK_CL_ERROR(clSetKernelArg(init_kernel, 0, sizeof(cl_mem), &arr), "Arg, compact is NOT set!");
   galois::OpenCL::CHECK_CL_ERROR(clSetKernelArg(init_kernel, 1, sizeof(int), (void*) &sz), "Arg, compact is NOT set!");
   galois::OpenCL::CHECK_CL_ERROR(clSetKernelArg(init_kernel, 2, sizeof(int), (void*) &val), "Arg, compact is NOT set!");
   size_t local = galois::OpenCL::OpenCL_Setup::workgroup_size(init_kernel, this);
   size_t global = (size_t) (ceil(sz / ((double) local)) * local);
   galois::OpenCL::CHECK_CL_ERROR(clEnqueueNDRangeKernel(this->command_queue(), init_kernel, 1, NULL, &global, &local, 0, NULL, NULL), "Failed init");
#endif
}//End CL_Device::init_on_device
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
}
#endif /* CL_DEVICE_MANAGER_H_ */
